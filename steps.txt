              2 

4) create proj greatkart
   create views.py in greatkart proj

   import views in urls py
   path for /home

5)   template

 create  template folder , the html files
 make changes in setting,
 'DIRS': ['templates'],  => added

from django.shortcuts import render


6)
         										   static setting

    create static folder,add all css js img

    add

 STATIC_URL = '/static/'
import os
STATICFILES_DIRS = [os.path.join(BASE_DIR, 'app/static')]
STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')




in setting


from django.conf.urls.static import static
from django.conf import settings
if settings.DEBUG:
    urlpatterns += static(settings.MEDIA_URL, document_root=settings.MEDIA_ROOT)


thenn  

python manage.py collectstatic






  














                         3rd folder

i created category appp,  write categoty class,
blank =True =>  field is optional
upload_to  => image uploadto given directoy

to use Imagefield,  we need to install Pillow,    pip install pillow

register model in admin py,


from .models import Category
admin.site.register(Category)


then makemigartions,  migrates


to change model name in admin panel
class Meta:
        verbose_name='category'
        verbose_name_plural='categories'




3)

                                                      to create custom user model

just copy paste this


create new app => accounts


in model.py


from django.db import models
from django.contrib.auth.models import AbstractBaseUser, BaseUserManager

class MyAccountManager(BaseUserManager):
    def create_user(self, first_name, last_name, username, email, password=None):
        if not email:
            raise ValueError("User must have an email address")
        
        if not username:
            raise ValueError("User must have a username")
        
        user = self.model(
            email=self.normalize_email(email),
            username=username,
            first_name=first_name,
            last_name=last_name,
        )
        
        user.set_password(password)
        user.save(using=self._db)
        return user
    
    def create_superuser(self, first_name, last_name, username, email, password=None):
        user = self.create_user(
            email=self.normalize_email(email),
            username=username,
            first_name=first_name,
            last_name=last_name,
            password=password
        )
    
        user.is_admin = True
        user.is_staff = True
        user.is_active = True
        user.is_superuser = True
    
        user.save(using=self._db)
        return user

class Account(AbstractBaseUser):
    first_name = models.CharField(max_length=50)
    last_name = models.CharField(max_length=50)
    username = models.CharField(max_length=50, unique=True)
    email = models.EmailField(max_length=50, unique=True)
    phone_number = models.CharField(max_length=50)
    
    # required fields
    date_joined = models.DateTimeField(auto_now_add=True)
    last_login = models.DateTimeField(auto_now=True)
    is_admin = models.BooleanField(default=False)  
    is_staff = models.BooleanField(default=False) 
    is_active = models.BooleanField(default=False) 
    is_superuser = models.BooleanField(default=False)
    
    USERNAME_FIELD = 'email'                                                    => to make login using email
    REQUIRED_FIELDS = ['username', 'first_name', 'last_name']

    objects = MyAccountManager()
    
    def __str__(self):
        return self.email
    
    def has_perm(self, perm, obj=None):
        return self.is_admin
    
    def has_module_perms(self, app_label):
        return True



       in setting.py
AUTH_USER_MODEL='accounts.Account'

if not works ,add this
AUTHENTICATION_BACKENDS = [
    'django.contrib.auth.backends.ModelBackend',
]




then  makegrations, migrate,


delete sqlite.db



then run server, this create new db



4) video


   									to make changes in display of user


in admin.py


from django.contrib import admin

# Register your models here.
from django.contrib.auth.admin import UserAdmin
from .models import Account



class AccountAdmin(UserAdmin):
    list_display = ('email', 'first_name', 'last_name','last_login','date_joined','is_active')  #   tshse list showed in admin
    # list_display_links = ('email', 'first_name', 'last_name')
    readonly_fields=('last_login','date_joined')                                                   =>  not editable


    filter_horizontal=()             => these r simply required to make changes
    list_filter=()
    fieldsets=()
    
admin.site.register(Account,AccountAdmin)               =>  here accountAdmin is passed additionaly






									change	categorty display in admin


in admin


from django.contrib import admin
from .models import Category

class CategoryAdmin(admin.ModelAdmin):
    list_display = ('category_name', 'slug', 'discription', 'cat_image')                      => display these things
    prepopulated_fields = {'slug': ('category_name',)}                                        => slug field automatically filled with category foeld

# Register the Category model with the CategoryAdmin class
admin.site.register(Category, CategoryAdmin)







                             4.1)                 created store app

from django.db import models

# Create your models here.

from category.models import Category
class Product(models.Model):
    product_name=models.CharField(max_length=200,unique=True)
    slug        =models.SlugField(max_length=300,unique=True)
    description =models.TextField(max_length=500,blank=True)
    price       =models.IntegerField()
    image       =models.ImageField(upload_to='photos/products')
    stock       =models.IntegerField()
    is_available=models.BooleanField(default=True)
    category    =models.ForeignKey(Category,on_delete=models.CASCADE)
    created_data=models.DateTimeField(auto_now_add=True)
    modified    =models.DateTimeField(auto_now=True)
    
    
    def __str__(self):
        return self.product_name




in admin.py


from django.contrib import admin

# Register your models here.


from .models import Product
class ProductAdmin(admin.ModelAdmin):
# class ProductAdmin(models.ModelAdmin):
    list_display=('product_name','price','category','stock','is_available')
    prepopulated_fields={'slug':('product_name',)}
    


admin.site.register(Product,ProductAdmin)





           4.6)
                               display the product in 2 ways




from django.contrib import admin
from django.urls import path,include

from . import views
urlpatterns = [
  
    path("",views.store,name="store"),
    path("<slug:category_slug>/",views.store,name="product_by_category"),
  
]





from django.shortcuts import render,get_object_or_404

# Create your views here.

from .models import Product
from category.models import Category

def store(request,category_slug=None):                                                              => default arg,methode overload
    categories=None
    products=None
    
    if category_slug!=None:
       print(category_slug)
       categories= get_object_or_404(Category, slug=category_slug)
       products=Product.objects.filter(category=categories,is_available=True)
       products_count=products.count()
    else:
        products=Product.objects.filter(is_available=True)
        products_count=products.count()
        
    context={
        'products':products,
        'products_count':products_count,
    }
    return render(request,'store/store.html',context)








                 					5.1)   context_processors.py

it recieve req as arg and return data as dic 


context_processors.py

from .models import Category

def menu_links(request):
    all_links=Category.objects.all()
    return dict(links=all_links)




then we hv to tell setting.py that we r using context_processors.py


in template  => add   'category.context_processors.menu_links',
			     'appname.file_name.function_name'


data return by menu_links is visible to all templates files
we can use this in normal process also, in views methods send model as context, thats it



								get_object_or_404
``								---------------



          selected_category = get_object_or_404(Category, slug=category_slug)
        single_product = get_object_or_404(Product, category=selected_category, slug=product_slug)

















 `						6) folder

created app called cart
2 models   cart and cartItem and register in admin.py

















                                           9)  paginator

from django.core.paginator import EmptyPage,PageNotAnInteger,Paginator


def store(request,category_slug=None):
    categories=None
    products=None
    
    if category_slug!=None:
       print(category_slug)
       categories= get_object_or_404(Category, slug=category_slug)
       products=Product.objects.filter(category=categories,is_available=True)
       products_count=products.count()
       paginator=Paginator(products,4)
       page=request.GET.get('page')
       paged_products=paginator.get_page(page)
       
    else:
        products=Product.objects.filter(is_available=True)
        paginator=Paginator(products,3)
        page=request.GET.get('page')
        paged_products=paginator.get_page(page)
        products_count=products.count()
        
    context={
        'products':paged_products,
        'products_count':products_count,
    }
    return render(request,'store/store.html',context)





<nav class="mt-4" aria-label="Page navigation sample">
 {% if products.has_other_pages %}
        <ul class="pagination">
           {% if products.has_previous %}
          <li class="page-item "><a class="page-link" href="?page={{products.previous_page_number}}">Previous</a></li>
           {% else %}
         <li class="page-item disabled"><a class="page-link" href="#">Previous</a></li> 
           {% endif %}
        
        {% for i in products.paginator.page_range %}
          {% if products.number == i %}
        <li class="page-item active"><a class="page-link" href="#">{{i}}</a></li>
          {% else %}
        <li class="page-item "><a class="page-link" href="?page={{i}}">{{i}}</a></li>
          {% endif %}
        {% endfor %}

        {% if products.has_next %}

        <li class="page-item"> <a class="page-link" href="?page={{products.next_page_number}} "> Next</a> </li>
        {% else %}  
        <li class="page-item disabled"> <a class="page-link" href="# "> Next</a> </li>
        {% endif %} 


    </ul>
 {% endif %}
    </nav>



















										search function


from django.db.models import Q

def search(request):
    if 'keyword' in request.GET:
        keyword = request.GET.get('keyword')

        if keyword:
            products = Product.objects.filter(Q(description__icontains=keyword) | Q(product_name__icontains=keyword))
        
    context = {
        'products': products,
    }        
    print(products.count(), "jvhmh")
    return render(request, 'store/store.html', context)





 <form action="{% url "search_product" %}" class="search">
               
                    <input type="text" class="form-control" style="width:60%;" placeholder="Search" name="keyword">
                    
                    
                      <button class="btn btn-primary" type="submit">
                        <i class="fa fa-search"></i>
                      </button>
                    
            </form> <!-- search-wrap .end// -->




{% if 'search' in request.path %}                                 => if path contains search then result store display
        <h2 class="title-page">Result Store</h2>
        {% else %}
        <h2 class="title-page">Our Store</h2>
        {% endif %}





                                         to make dropdown option in adminpanel    10.1 folder   (filter, display,list)


variation_category_choice=(
       ('color','color'),
       ('size','size'),
   ) 
    
class variation(models.Model):
    product = models.ForeignKey(Product,on_delete=models.CASCADE)
    variation_category = models.CharField(max_length=100,choices=variation_category_choice)  # dropdown for color , size in adminpanel
    variation_value = models.CharField(max_length=100)



class variationAdmin(admin.ModelAdmin):
    list_display=('product','variation_category','variation_value','is_available')
    list_editable=('is_active',)
    list_filter=('product','variation_category','variation_value','is_active')
     
admin.site.register(variation,variationAdmin)


      